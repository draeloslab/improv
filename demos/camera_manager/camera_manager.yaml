actors:
  # gui class for displaying the video frames
  GUI:
    package: actors.video_screen
    class: Visual
    visual: VideoScreen

  # actor for starting the GUI
  VideoScreen:
    package: actors.video_screen
    class: VideoScreen
  
  # camera readers: each camera reader use the camera API for reading the frames
  CameraReader0:
    package: actors.camera_reader
    class: CameraReader
    camera_num: 0

  CameraReader1:
    package: actors.camera_reader
    class: CameraReader
    camera_num: 1

  CameraReader2:
    package: actors.camera_reader
    class: CameraReader
    camera_num: 2

  # video savers: each video saver writes the frames readed to raw-video file
  VideoSaver0:
    package: actors.video_saver_multiproc
    # package: actors.video_saver
    class: VideoSaver
    camera_num: 0
    method: spawn

  VideoSaver1:
    package: actors.video_saver_multiproc    
    # package: actors.video_saver
    class: VideoSaver
    camera_num: 1
    method: spawn
    
  VideoSaver2:
    package: actors.video_saver_multiproc
    # package: actors.video_saver
    class: VideoSaver
    camera_num: 2
    method: spawn

  # video converter: each video converter transform raw-video files of camera to video file (and delete the raw file)  
  VideoConverter0:
    package: actors.video_converter
    class: VideoConverter
    method: spawn
    camera_num: 0

  VideoConverter1:
    package: actors.video_converter
    class: VideoConverter
    method: spawn
    camera_num: 1

  VideoConverter2:
    package: actors.video_converter
    class: VideoConverter
    method: spawn
    camera_num: 2

connections:
  CameraReader0.q_out: [VideoSaver0.q_in, VideoScreen.camera0_in]
  CameraReader1.q_out: [VideoSaver1.q_in, VideoScreen.camera1_in]
  CameraReader2.q_out: [VideoSaver2.q_in, VideoScreen.camera2_in]
  VideoSaver0.q_out: [VideoConverter0.q_in]
  VideoSaver1.q_out: [VideoConverter1.q_in]
  VideoSaver2.q_out: [VideoConverter2.q_in]

redis_config:
  port: 6379